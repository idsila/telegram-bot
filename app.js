require("dotenv").config();

const commands = require("./commands.js");
const { Telegraf, session, Scenes } = require("telegraf");
const express = require("express");
const cors = require("cors");
const app = express();

app.use(cors({methods:["GET", "POST"]}));
app.use(express.json());    

const ADMIN_ID = 7502494374;

const bot = new Telegraf(process.env.TOKEN);
bot.use(
  session({
    defaultSession: () => ({ write_user: false }),
    defaultSession: () => ({ write_admin: false }),
  })
);

bot.telegram.setMyCommands(commands);

// –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–Ω—è—Ç–∏–π –∏ –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤ –∫–∞–Ω–∞–ª
const joinUsers = {};
bot.on("chat_join_request", async (ctx) => {
  const { chat, from, invite_link, date } = ctx.chatJoinRequest;

  joinUsers[from.id] = {
    chat: chat,
    from: from,
    date: date,
    invite_link: invite_link.invite_link,
    join: false,
  };
  console.log(joinUsers);
  await bot.telegram.sendPhoto(
    from.id,
    "https://i.ibb.co/yBXRdX1R/IMG-20250513-121336.jpg",
    {
      caption:
        " üîê <b>–ß—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ –Ω–∞—à —Ç–≥ –∫–∞–Ω–∞–ª –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã –Ω–µ —Ä–æ–±–æ—Ç –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ. </b>",
      parse_mode: "HTML",
      reply_markup: {
        inline_keyboard: [
          [{ text: "–Ø –Ω–µ —Ä–æ–±–æ—Ç üöÄ", callback_data: "approve_join" }],
        ],
      },
    }
  );
});
bot.action("approve_join", async (ctx) => {
  const user = ctx.update.callback_query.from;
  if (joinUsers[user.id]) {
    if (!joinUsers[user.id].join) {
      joinUsers[user.id].join = true;
      await ctx.telegram.approveChatJoinRequest(
        joinUsers[user.id].chat.id,
        user.id
      );
      await ctx.reply("üõ†Ô∏è <b>–í—ã –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É</b>", { parse_mode: "HTML" });
    } else {
      await ctx.reply("üèÅ <b>–í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É</b>", {
        parse_mode: "HTML",
      });
    }
  }
});

//–°—Ü–µ–Ω—ã

const writeHelp = new Scenes.WizardScene(
  "write_help",
  (ctx) => {
    ctx.session.write_user = true;
    ctx.reply("<b>–ù–∞–ø–∏—à–∏—Ç–µ –æ –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º–µ, –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ.</b>", {
      parse_mode: "HTML",
      reply_markup: {
        inline_keyboard: [
          [{ text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data: "cancel_write_help" }],
        ],
      },
    });
    return ctx.wizard.next();
  },
  (ctx) => {
    const { id, username } = ctx.from;

    if (
      (ctx.callbackQuery?.data === "help" && ctx.session.write_user) ||
      ctx.callbackQuery?.data === "cancel_write_user_help" ||
      ctx.callbackQuery?.data === "cancel_write_help"
    ) {
      ctx.session.write_user = false;
      ctx.deleteMessage();
      return ctx.scene.leave();
    }

    ctx.session.write_user = false;

    if (ctx.update.message.photo) {
      const photo = ctx.update.message.photo.pop();
      ctx.telegram.sendPhoto(ADMIN_ID, photo.file_id, {
        caption: `<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${username}</b> \n <blockquote>${
          ctx.update.message.caption ?? "–ü—É—Å—Ç–æ"
        }</blockquote>`,
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [{ text: "–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data: `user_${id}_${username}` }],
          ],
        },
      });
    } else {
      ctx.telegram.sendMessage(
        ADMIN_ID,
        `<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${username}</b> > \n <blockquote>${ctx.message.text}</blockquote>`,
        {
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [{ text: "–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data: `user_${id}_${username}` }],
            ],
          },
        }
      );
    }
    ctx.reply(`‚úÖ <b>–ì–æ—Ç–æ–≤–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç —Ä–∞—Å–º–æ—Ç—Ä–µ–Ω–Ω–∞.</b>`, {
      parse_mode: "HTML",
    });
    return ctx.scene.leave();
  }
);

const writeHelpAdmin = new Scenes.WizardScene(
  "write_help_admin",
  (ctx) => {
    const { id, username } = ctx.scene.state;
    ctx.session.write_admin = true;
    ctx.reply(`<b>–û—Ç–≤–µ—á–∞–µ–º > @${username}</b>`, {
      parse_mode: "HTML",
      reply_markup: {
        inline_keyboard: [
          [{ text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data: "cancel_write_user_help" }],
        ],
      },
    });
    return ctx.wizard.next();
  },
  (ctx) => {
    const { id, username } = ctx.scene.state;

    if (ctx.callbackQuery?.data.startsWith("user") && ctx.session.write_admin) {
      ctx.session.write_admin = false;
      return ctx.scene.leave();
    }

    if (
      ctx.callbackQuery?.data === "cancel_write_user_help" ||
      ctx.callbackQuery?.data === "cancel_write_help"
    ) {
      ctx.session.write_admin = false;
      ctx.deleteMessage();
      return ctx.scene.leave();
    }
    ctx.session.write_admin = false;

    if (ctx.update.message.photo) {
      const photo = ctx.update.message.photo.pop();
      ctx.telegram.sendPhoto(id, photo.file_id, {
        caption: `üîî <b>–û—Ç–≤–µ—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b> >
        \n<blockquote>${ctx.update.message.caption ?? "–ü—É—Å—Ç–æ"}</blockquote>`,
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [{ text: "üíª –ù–∞–ø–∏—Å–∞—Ç—å –µ—â—ë", callback_data: `help` }],
          ],
        },
      });
    } else {
      ctx.telegram.sendMessage(
        id,
        `üîî <b>–û—Ç–≤–µ—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b> > \n <blockquote>${ctx.message.text}</blockquote>`,
        {
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [{ text: "üíª –ù–∞–ø–∏—Å–∞—Ç—å –µ—â—ë", callback_data: `help` }],
            ],
          },
        }
      );
    }
    ctx.reply(`‚úÖ <b>–ì–æ—Ç–æ–≤–æ! –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.</b>`, { parse_mode: "HTML" });
    return ctx.scene.leave();
  }
);

const stage = new Scenes.Stage([writeHelp, writeHelpAdmin]);
bot.use(stage.middleware());

bot.action(/^user/i, async (ctx) => {
  if (!ctx.session.write_admin) {
    ctx.session.write_admin = false;
    const [, id, username] = ctx.match.input.split("_");
    ctx.scene.enter("write_help_admin", { id, username });
  }
});
bot.action("help", async (ctx) => {
  if (!ctx.session.write_user) {
    ctx.session.write_user = false;
    ctx.scene.enter("write_help");
  }
});

// –ö–æ–º–º–∞–Ω–¥—ã
bot.command("start", async (ctx) => {
  ctx.replyWithPhoto("https://i.ibb.co/yBXRdX1R/IMG-20250513-121336.jpg", {
    caption: `<b>–ü—Ä–∏–≤–µ—Ç! üëã –Ø ‚Äî –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç —Å –º–æ—â–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º —Ñ—É–Ω–∫—Ü–∏–π! –ú–æ–≥—É —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å qr-–∫–æ–¥, –∏–º–µ—è—Ç—å—Å—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏, –º–∏–Ω–∏-–∏–≥—Ä—ã, –∞ —Ç–∞–∫–∂–µ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –º–∏–Ω–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ó–∞–≥–ª—è–Ω–∏ –≤ /about ‚Äî —Ç–∞–º –≤—Å—ë, —á—Ç–æ —è —É–º–µ—é!</b>`,
    parse_mode: "HTML",
  });
});

bot.command("about", async (ctx) => {
  ctx.replyWithPhoto("https://i.ibb.co/yBXRdX1R/IMG-20250513-121336.jpg", {
    caption: `‚ú® <b>–ß—Ç–æ —è —É–º–µ—é:</b><blockquote>‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥—ã –ø–æ –ª—é–±–æ–π —Å—Å—ã–ª–∫–µ (/qr)
‚Ä¢ –ù–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏ –∏–¥–µ–π (/ai)



    ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É ¬´–£–≥–∞–¥–∞–π –º–∏–Ω–µ—Ä–∞–ª¬ª (/mineralgame)

‚Ä¢ –ù–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏ –∏–¥–µ–π (/ai)
‚Ä¢ –ò –µ—â—ë –∫—É—á–∞ –ø–æ–ª–µ–∑–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ ‚Äî —Å–º–æ—Ç—Ä–∏ /help
</blockquote>`,
    parse_mode: "HTML",
  });
})


bot.command("help", async (ctx) => {
  if (!ctx.session.write_user) {
    ctx.session.write_user = false;
    ctx.scene.enter("write_help");
  }
});

// bot.telegram.sendPhoto(
//   ADMIN_ID,
//   "https://quickchart.io/qr?text=https://best-earn.vercel.app&size=400",
//   {
//     caption: `üîî <b>–û—Ç–≤–µ—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b> >
//   \n<blockquote>–ü—É—Å—Ç–æ</blockquote>`,
//     parse_mode: "HTML",
//   }
// );

//bot.on('text', ctx => console.log(ctx.update.message.from));
bot.launch();

app.get('/sleep', async (req, res) =>{
  res.send({type: 200});
});

app.listen(3000, err =>{
  err ? err : console.log('STARTED SERVER');
})