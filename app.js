require("dotenv").config();

const commands = require("./commands.js");
const dataBase = require("./dataBase.js");
const { Telegraf, session, Scenes } = require("telegraf");
const express = require("express");
const axios = require("axios");
const cors = require("cors");
const { parse } = require("dotenv");
const app = express();

app.use(cors({ methods: ["GET", "POST"] }));
app.use(express.json());

const ADMIN_ID = 7502494374;

const bot = new Telegraf(process.env.TOKEN);
bot.use(
  session({
    defaultSession: () => ({ write_user: false }),
    defaultSession: () => ({ write_admin: false }),
    defaultSession: () => ({ qr_code: false }),
    defaultSession: () => ({ ai_disabled: false }),
    defaultSession: () => ({ ai_answer: false }),
  })
);

//bot.telegram.setMyCommands(commands);

// –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–Ω—è—Ç–∏–π –∏ –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤ –∫–∞–Ω–∞–ª
bot.on("chat_join_requests", async (ctx) => {
  const {
    chat,
    from: { id, first_name, username, language_code },
    date,
  } = ctx.chatJoinRequest;
  dataBase.findOne({ username }).then(async (res) => {
    if (!res) {
      //–ó–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞
      dataBase.insertOne({
        id,
        first_name,
        username,
        language_code,
        refferals: 0,
        date: dateNow(),
        balance: 0,
        data_channel: { chat: chat, date: date, join: false },
      });
    } else if (res.data_channel === null || res.data_channel?.join) {
      //–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
      dataBase.updateOne(
        { username },
        { $set: { data_channel: { chat: chat, date: date, join: false } } }
      );
    }
  });

  await bot.telegram.sendPhoto(
    id,
    "https://i.ibb.co/yBXRdX1R/IMG-20250513-121336.jpg",
    {
      caption:
        " üîê <b>–ß—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ –Ω–∞—à —Ç–≥ –∫–∞–Ω–∞–ª –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã –Ω–µ —Ä–æ–±–æ—Ç –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ. </b>",
      parse_mode: "HTML",
      reply_markup: {
        inline_keyboard: [
          [{ text: "–Ø –Ω–µ —Ä–æ–±–æ—Ç üöÄ", callback_data: "approve_join" }],
        ],
      },
    }
  );
});
bot.action("approve_join", async (ctx) => {
  const { id, first_name, username, language_code } =
    ctx.update.callback_query.from;
  dataBase.findOne({ username }).then(async (res) => {
    if (res) {
      if (!res.data_channel?.join || res.data_channel === null) {
        await dataBase.updateOne(
          { username },
          {
            $set: {
              data_channel: {
                chat: res.data_channel.chat,
                date: res.data_channel.date,
                join: true,
              },
            },
          }
        );
        await ctx.telegram.approveChatJoinRequest(res.data_channel.chat.id, id);
        await ctx.reply("üõ†Ô∏è <b>–í—ã –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É</b>", { parse_mode: "HTML" });
      } else {
        await ctx.reply("üèÅ <b>–í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É</b>", {
          parse_mode: "HTML",
        });
      }
    }
  });
});

//–°—Ü–µ–Ω—ã

const writeHelp = new Scenes.WizardScene(
  "write_help",
  (ctx) => {
    ctx.session.write_user = true;
    ctx.reply("<b>–ù–∞–ø–∏—à–∏—Ç–µ –æ –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º–µ, –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ.</b>", {
      parse_mode: "HTML",
      reply_markup: {
        inline_keyboard: [
          [{ text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data: "cancel_write_help" }],
        ],
      },
    });
    return ctx.wizard.next();
  },
  (ctx) => {
    const { id, username } = ctx.from;

    if (
      (ctx.callbackQuery?.data === "help" && ctx.session.write_user) ||
      ctx.callbackQuery?.data === "cancel_write_user_help" ||
      ctx.callbackQuery?.data === "cancel_write_help"
    ) {
      ctx.session.write_user = false;
      ctx.deleteMessage();
      return ctx.scene.leave();
    }

    ctx.session.write_user = false;

    if (ctx.update.message.photo) {
      const photo = ctx.update.message.photo.pop();
      ctx.telegram.sendPhoto(ADMIN_ID, photo.file_id, {
        caption: `<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${username}</b> \n <blockquote>${
          ctx.update.message.caption ?? "–ü—É—Å—Ç–æ"
        }</blockquote>`,
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [{ text: "–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data: `user_${id}_${username}` }],
          ],
        },
      });
    } else {
      ctx.telegram.sendMessage(
        ADMIN_ID,
        `<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${username}</b> > \n <blockquote>${ctx.message.text}</blockquote>`,
        {
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [{ text: "–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data: `user_${id}_${username}` }],
            ],
          },
        }
      );
    }
    ctx.reply(`‚úÖ <b>–ì–æ—Ç–æ–≤–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç —Ä–∞—Å–º–æ—Ç—Ä–µ–Ω–Ω–∞.</b>`, {
      parse_mode: "HTML",
    });
    return ctx.scene.leave();
  }
);

const writeHelpAdmin = new Scenes.WizardScene(
  "write_help_admin",
  (ctx) => {
    const { id, username } = ctx.scene.state;
    ctx.session.write_admin = true;
    ctx.reply(`<b>–û—Ç–≤–µ—á–∞–µ–º > @${username}</b>`, {
      parse_mode: "HTML",
      reply_markup: {
        inline_keyboard: [
          [{ text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data: "cancel_write_user_help" }],
        ],
      },
    });
    return ctx.wizard.next();
  },
  (ctx) => {
    const { id, username } = ctx.scene.state;

    if (ctx.callbackQuery?.data.startsWith("user") && ctx.session.write_admin) {
      ctx.session.write_admin = false;
      return ctx.scene.leave();
    }

    if (
      ctx.callbackQuery?.data === "cancel_write_user_help" ||
      ctx.callbackQuery?.data === "cancel_write_help"
    ) {
      ctx.session.write_admin = false;
      ctx.deleteMessage();
      return ctx.scene.leave();
    }
    ctx.session.write_admin = false;

    if (ctx.update.message.photo) {
      const photo = ctx.update.message.photo.pop();
      ctx.telegram.sendPhoto(id, photo.file_id, {
        caption: `üîî <b>–û—Ç–≤–µ—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b> >
        \n<blockquote>${ctx.update.message.caption ?? "–ü—É—Å—Ç–æ"}</blockquote>`,
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [{ text: "üíª –ù–∞–ø–∏—Å–∞—Ç—å –µ—â—ë", callback_data: `help` }],
          ],
        },
      });
    } else {
      ctx.telegram.sendMessage(
        id,
        `üîî <b>–û—Ç–≤–µ—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b> > \n <blockquote>${ctx.message.text}</blockquote>`,
        {
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [{ text: "üíª –ù–∞–ø–∏—Å–∞—Ç—å –µ—â—ë", callback_data: `help` }],
            ],
          },
        }
      );
    }
    ctx.reply(`‚úÖ <b>–ì–æ—Ç–æ–≤–æ! –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.</b>`, { parse_mode: "HTML" });
    return ctx.scene.leave();
  }
);


const qrCode = new Scenes.WizardScene(
  "qr_code",
  (ctx) => {
    ctx.session.qr_code = true;
    ctx.reply(
      `<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Å—Å—ã–ª–∫—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ qr-–∫–æ–¥–∞ @${ctx.from.username}</b>`,
      {
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [{ text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data: "cancel_qr_code" }],
          ],
        },
      }
    );
    return ctx.wizard.next();
  },
  (ctx) => {
    ctx.deleteMessage();
    if (ctx.callbackQuery?.data === "cancel_qr_code") {
      ctx.session.qr_code = false;
      return ctx.scene.leave();
    }
    ctx.session.qr_code = false;

    const text = ctx.update.message.text;
    ctx.telegram.sendPhoto(ctx.from.id, `https://quickchart.io/qr?text=${text}&size=400`, {
      caption: `üîî <b>QR-code —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω</b> >
        \n<blockquote>${text}</blockquote>`,
      parse_mode: "HTML",
      reply_markup: {
        inline_keyboard: [[{ text: "üíª –°–≥–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â—ë qr-code", callback_data: `qr_code` }]],
      },
    });

    return ctx.scene.leave();
  }
);


const stage = new Scenes.Stage([writeHelp, writeHelpAdmin, qrCode]);
bot.use(stage.middleware());

// –î–µ–π—Å—Ç–≤–∏—è –ø–æ –Ω–∞–∂–∞—Ç–∏—é inline –∫–Ω–æ–ø–∫–∏
bot.action(/^user/i, async (ctx) => {
  if (!ctx.session.write_admin) {
    ctx.session.write_admin = false;
    const [, id, username] = ctx.match.input.split("_");
    ctx.scene.enter("write_help_admin", { id, username });
  }
});
bot.action("help", async (ctx) => {
  if (!ctx.session.write_user) {
    ctx.session.write_user = false;
    ctx.scene.enter("write_help");
  }
});

bot.action("menu", async (ctx) => {
  await ctx.deleteMessage();
  ctx.replyWithPhoto("https://i.ibb.co/qYJqZjqG/card-1001.jpg", {
    caption: "",
    parse_mode: "HTML",
    reply_markup: {
      inline_keyboard: [
        [
          { text: "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data: `pay_balance` },
          { text: "üõí –ö—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data: `buy_item` },
        ],
        [
          { text: "üß† –ù–µ–π—Ä–æ—Å–µ—Ç—å", callback_data: `ai_menu` }
        ],
        [
          { text: "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫", callback_data: `check_sub` },
          { text: "üì® –ü—Ä–∏–Ω—è—å—Ç–∏–µ –∑–∞—è–≤–æ–∫", callback_data: `connect_admin` },
        ],
        [
          { text: "üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞", callback_data: `qr_code` },
          { text: "üïµÔ∏è‚Äç‚ôÇÔ∏è –§–æ—Ç–æ—à–ø–∏–æ–Ω", callback_data: `photo_shpion` },
        ],
        [{ text: "üì± –ú–∏–Ω–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", callback_data: `mini_app` }],
        [{ text: "üë®‚Äçüíª –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º", callback_data: `help` }],
      ],
    },
  });
});



bot.action("menu_back", async (ctx) => {
  if(ctx.session.ai_disabled){
    ctx.session.ai_disabled = false;
  }

  await ctx.editMessageMedia({
    type:"photo",
    media: "https://i.ibb.co/qYJqZjqG/card-1001.jpg",
    caption: "",
    parse_mode: "HTML"
  },
  {
    reply_markup: {
      inline_keyboard: [
        [
          { text: "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data: `pay_balance` },
          { text: "üõí –ö—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data: `buy_item` },
        ],
        [
          { text: "üß† –ù–µ–π—Ä–æ—Å–µ—Ç—å", callback_data: `ai_menu` },
        ],
        [
          { text: "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫", callback_data: `check_sub` },
          { text: "üì® –ü—Ä–∏–Ω—è—å—Ç–∏–µ –∑–∞—è–≤–æ–∫", callback_data: `connect_admin` },
        ],
        [
          { text: "üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞", callback_data: `qr_code` },
          { text: "üïµÔ∏è‚Äç‚ôÇÔ∏è –§–æ—Ç–æ—à–ø–∏–æ–Ω", callback_data: `photo_shpion` },
        ],
        [{ text: "üì± –ú–∏–Ω–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", callback_data: `mini_app` }],
        [{ text: "üë®‚Äçüíª –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º", callback_data: `help` }],
      ],
    },
  });
});


bot.action("pay_balance", async (ctx) => {
  //await ctx.deleteMessage();


  await ctx.editMessageMedia({
    type: 'photo', 
    media: 'https://i.ibb.co/tTQ574gv/card-1002.jpg',
    caption: '<b>üí∏ –≠—Ç–æ –≤—Å–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.</b>',                     
    parse_mode: 'HTML'
  }, {
    reply_markup: {
      inline_keyboard: [
        [
          { text: "üí≥ –ÆMoney", callback_data: `pay_umoney` },
          { text: "üß† –ö—Ä–∏–ø—Ç–∞", callback_data: `pay_crypto` },
        ],
        [{ text: "‚≠ê –ó–≤–µ–∑–¥—ã", callback_data: `pay_stars`, pay: true }],
        [{ text: "<< –ù–∞–∑–∞–¥", callback_data: `menu_back` }],
      ],
    }
  })
  // await ctx.replyWithPhoto(
  //   "https://i.ibb.co/yBXRdX1R/IMG-20250513-121336.jpg",
  //   {
  //     caption: "<b>üí∏ –≠—Ç–æ –≤—Å–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.</b>",
  //     parse_mode: "HTML",
  //     reply_markup: {
  //       inline_keyboard: [
  //         [
  //           { text: "üí≥ –ÆMoney", callback_data: `pay_umoney` },
  //           { text: "üß† –ö—Ä–∏–ø—Ç–∞", callback_data: `pay_crypto` },
  //         ],
  //         [{ text: "‚≠ê –ó–≤–µ–∑–¥—ã", callback_data: `pay_stars`, pay: true }],
  //         [{ text: "<< –ù–∞–∑–∞–¥", callback_data: `menu_back` }],
  //       ],
  //     },
  //   }
  // );

});

bot.action("pay_umoney", async (ctx) => {
  await ctx.editMessageMedia({
      type:"photo",
      media:"https://i.ibb.co/fbWNWJY/card-1003.jpg",
      caption: "<b>üí∏ –≠—Ç–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ –ÆMoney.</b>",
      parse_mode: "HTML"
  },{
      reply_markup: {
        inline_keyboard: [
          [
            { text: "50‚ÇΩ", callback_data: `pay_umoney_50` },
            { text: "100‚ÇΩ", callback_data: `pay_umoney_100` },
            { text: "150‚ÇΩ", callback_data: `pay_umoney_150` },
          ],
          [
            { text: "200‚ÇΩ", callback_data: `pay_umoney_200` },
            { text: "250‚ÇΩ", callback_data: `pay_umoney_250` },
            { text: "300‚ÇΩ", callback_data: `pay_umoney_300` },
          ],
          [{ text: "<< –ù–∞–∑–∞–¥", callback_data: `pay_balance` }],
        ],
      },
    }
  );
});



bot.action("mini_app", async (ctx) => {
  await ctx.editMessageMedia({
      type:"photo",
      media:"https://i.ibb.co/sp8gcRrG/card-1006.jpg",
      caption: "<b>üì± –≠—Ç–æ –º–∏–Ω–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.</b>",
      parse_mode: "HTML"
  },{
      reply_markup: {
        inline_keyboard: [
          [
            { text: "–ö–ª–∏–∫–µ—Ä Notcoin", web_app: { url: "https://notcoin-ids.vercel.app/" } },
            { text: "–ö–∞–∑–∏–Ω–æ –∫–µ–π—Å—ã", web_app: { url: "https://notcoin-ids.vercel.app/" } },

          ],
          [
            { text: "–ù–µ–π—Ä–æ–Ω–∫–∞", web_app: { url: "https://notcoin-ids.vercel.app/" } },
          ],
          [{ text: "<< –ù–∞–∑–∞–¥", callback_data: "menu_back" }],
        ],
      },
    }
  );
});


bot.action("ai_menu", async (ctx) => {
  ctx.session.ai_disabled = true;
  await ctx.editMessageMedia({
      type:"photo",
      media:"https://i.ibb.co/gLF9nJHw/card-1007.jpg",
      caption: "<b>üì± –ó–∞–¥–∞–≤–∞–π—Ç–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–µ–π—Ä–æ—Å–µ—Ç–∏. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–æ–Ω—á–∏—Ç—å –ø–µ—Ä–ø–∏—Å–∫—É —Ç–æ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /stop –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.</b>",
      parse_mode: "HTML"
  },{
      reply_markup: {
        inline_keyboard: [
          [{ text: "–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data: "menu_back" }]
        ],
      },
    }
  );
});





bot.action("qr_code", async (ctx) => {
  await ctx.deleteMessage();
  if (!ctx.session.qr_code) {
    ctx.session.qr_code = false;
    ctx.scene.enter("qr_code");
  }
});

// –î–µ–π—Å—Ç–≤–∏—è –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏ –∏–∑ keyboard
bot.hears("üóÇÔ∏è –ú–µ–Ω—é", async (ctx) => {
  await ctx.deleteMessage();
  await ctx.replyWithPhoto(
    "https://i.ibb.co/qYJqZjqG/card-1001.jpg",
    {
      caption: "–ú–µ–Ω—é –±–æ—Ç–∞",
      reply_markup: {
        inline_keyboard: [
          [
            { text: "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data: `pay_balance` },
            { text: "üõí –ö—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data: `buy_item` },
          ],
          [
            { text: "üß† –ù–µ–π—Ä–æ—Å–µ—Ç—å", callback_data: `ai_menu` }
          ],
          [
            { text: "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫", callback_data: `check_sub` },
            { text: "üì® –ü—Ä–∏–Ω—è—å—Ç–∏–µ –∑–∞—è–≤–æ–∫", callback_data: `connect_admin` },
          ],
          [
            { text: "üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞", callback_data: `qr_code` },
            { text: "üïµÔ∏è‚Äç‚ôÇÔ∏è –§–æ—Ç–æ—à–ø–∏–æ–Ω", callback_data: `photo_shpion` },
          ],
          [{ text: "üì± –ú–∏–Ω–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", callback_data: `mini_app` }],
          [{ text: "üë®‚Äçüíª –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º", callback_data: `help` }],
        ],
      },
    }
  );
});
bot.hears("üë®‚Äçüíª –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º", async (ctx) => {
  await ctx.deleteMessage();
  if (!ctx.session.write_user) {
    ctx.session.write_user = false;
    ctx.scene.enter("write_help");
  }
});
bot.hears("üë® –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", async (ctx) => {
  const { id, first_name, username, language_code } = ctx.from;
  dataBase.findOne({ username }).then(async (res) => {
    await ctx.deleteMessage();
    await ctx.reply(
      `<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ üë® –∞–∫–∫–∞—É–Ω—Ç—É:</b>\nüÜî ID: <code>${res.id}</code>
üí∞ –ë–∞–ª–∞–Ω—Å: ${res.balance} ‚ÇΩ

ü§ù –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞: - /ref
‚Äç‚îú –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${res.refferals}
`,
      {
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [{ text: "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data: `pay_balance` }],
          ],
        },
      }
    );
  });
});

// –ö–æ–º–º–∞–Ω–¥—ã
bot.command("start", async (ctx) => {
  const { id, first_name, username, language_code } = ctx.from;

  dataBase.findOne({ id, first_name, username }).then((res) => {
    if (!res) {
      console.log("–ó–∞–ø–∏—Å—å  —Å–æ–∑–¥–∞–µ—Ç—å—Å—è");
      dataBase.insertOne({
        id,
        first_name,
        username,
        language_code,
        refferals: 0,
        date: dateNow(),
        balance: 0,
        data_channel: null,
      });
    } else {
      console.log("–ó–∞–ø–∏—Å—å —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞");
    }
  });
//{ text: "üß† –ö—É–ø–∏—Ç—å –±–æ—Ç–∞", callback_data: `ai_menu` },
  ctx.replyWithPhoto("https://i.ibb.co/0jmGR3S4/card-1000.jpg", {
    caption: `<b>–ü—Ä–∏–≤–µ—Ç! üëã –Ø ‚Äî –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç —Å –º–æ—â–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º —Ñ—É–Ω–∫—Ü–∏–π!</b>\n<blockquote>–ò–º–µ—é—Ç—å—Å—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏, –º–∏–Ω–∏-–∏–≥—Ä—ã, –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–µ –º–∏–Ω–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ —Ç–¥.\n–ó–∞–≥–ª—è–Ω–∏ –≤ /about ‚Äî —Ç–∞–º –≤—Å—ë, —á—Ç–æ —è —É–º–µ—é!</blockquote>`,
    parse_mode: "HTML",
    reply_markup: {
      keyboard: [
        [{ text: "üóÇÔ∏è –ú–µ–Ω—é", callback_data: `menu` }],
        [
          { text: "üë® –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data: `translate` }
        ],
        [{ text: "üë®‚Äçüíª –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º", callback_data: `help` }],
      ],
    },
  });
});

bot.command("drop", async (ctx) => {
  dataBase.deleteMany({});
  ctx.reply("DROP COLLECTION");
});

bot.command("about", async (ctx) => {
  ctx.replyWithPhoto("https://i.ibb.co/rf08CWL0/card-1008.jpg", {
    caption: `‚ú® <b>–ß—Ç–æ —è —É–º–µ—é:</b>\n<blockquote>‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥—ã
‚Ä¢ –ù–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç

‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫
‚Ä¢ –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–æ–∫ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
‚Ä¢ –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º

‚Ä¢ –û–ø–ª–∞—Ç–∞ –∑–≤–µ–∑–¥–∞–º–∏
‚Ä¢ –û–ø–ª–∞—Ç–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π
‚Ä¢ –û–ø–ª–∞—Ç–∞ –ÆMoney

‚Ä¢ –ü–æ–∫—É–ø–∞ –∑–≤–µ–∑–¥
‚Ä¢ –ü–æ–∫—É–ø–∫–∞ –Ω–∞–∫—Ä—É—Ç–∫–∏

‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑–∞–≥—Ä—ã—à–µ–π
‚Ä¢ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ —Å —Ç–∏–∫—Ç–æ–∫–∞
</blockquote>\nüì± <b>–ú–∏–Ω–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:</b>\n<blockquote>‚Ä¢ –ö–æ–ø–∏—è –∫–ª–∏–∫–µ—Ä–∞ Notcoin
‚Ä¢ –ö–æ–ø–∏—è —Ñ–µ–π–∫ –∫–∞–∑–∏–Ω–æ
‚Ä¢ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∏–∏
</blockquote>

`,
    parse_mode: "HTML",
    reply_markup: {
      inline_keyboard: [[{ text: "üóÇÔ∏è –ú–µ–Ω—é", callback_data: `menu` }]],
    },
  });
});

bot.command("help", async (ctx) => {
  if (!ctx.session.write_user) {
    ctx.session.write_user = false;
    ctx.scene.enter("write_help");
  }
});

bot.command("db", async (ctx) => {
  dataBase.find({}).then((res) => {
    ctx.reply("```js" + JSON.stringify(res, null, 2) + "```", {
      parse_mode: "Markdown",
    });
  });
});

bot.command("stop", async (ctx) => {
  if(ctx.session.ai_disabled){
    ctx.session.ai_disabled = false;
  }
});


// bot.telegram.sendPhoto(
//   ADMIN_ID,
//   "https://quickchart.io/qr?text=https://best-earn.vercel.app&size=400",
//   {
//     caption: `üîî <b>–û—Ç–≤–µ—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b> >
//   \n<blockquote>–ü—É—Å—Ç–æ</blockquote>`,
//     parse_mode: "HTML",
//   }
// );

//bot.on('text', ctx => console.log(ctx.update.message.from));

const delay = ms => new Promise(res => { setTimeout(() => res(),ms) });


const messageAi = { }

bot.on('message', async (ctx) =>{
  if(ctx.session.ai_disabled){
    console.log('–ù–∞–ø–∏—Å–∞–ª –º–Ω–µ');
    await ctx.replyWithChatAction('typing');
    const txt = ctx.message.text;
    //await delay(2000);  
    const res = await askAI(txt) ?? '–ë–æ–ª—å—à–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ';
     //reply_to_message_id: ctx.message.message_id
    await ctx.reply(`üîî <b>–û—Ç–≤–µ—Ç DeepSeek</b> >\n<blockquote>${res}</blockquote>`, {
      parse_mode: "HTML",
      reply_to_message_id: ctx.message.message_id
    });
    
  }
})





bot.launch();


const TOKEN1 =
'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';
const TOKEN2 =
'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';
async function askAI(ask){
  return await axios.post("https://openrouter.ai/api/v1/chat/completions", {
      "model": "deepseek/deepseek-chat-v3-0324:free",
      "messages": [
        {
          "role": "user",
          "content": ask
        }
      ]
    },{
     headers: {
      "Authorization": `Bearer ${TOKEN1}`,
      "HTTP-Referer": "https://guttural-hurricane-pixie.glitch.me/sleep", // Optional. Site URL for rankings on openrouter.ai.
      "X-Title": "Mutual Boost 2", // Optional. Site title for rankings on openrouter.ai.
      "Content-Type": "application/json"
    }      
  
  
  }).then( async (res) =>{
    const response = await res.data.choices[0].message.content;
    console.log(response);
    return response
  })
  .catch(async (e) => {
    console.log(e)
  })
} 
//askAI('Hello')




function dateNow() {
  return new Date().getTime();
}

app.get("/sleep", async (req, res) => {
  res.send({ type: 200 });
});

app.post('/ai', async (req,res) =>{
  const { ask }  = req.body;
  //console.log(req.body)
  //await delay(2000);
  
  const answer = await askAI(ask);
  await res.send({ answer });
});


app.listen(3000, (err) => {
  err ? err : console.log("STARTED SERVER");
});
